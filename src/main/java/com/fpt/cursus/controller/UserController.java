package com.fpt.cursus.controller;

import com.fpt.cursus.service.AccountService;
import com.fpt.cursus.service.CourseService;
import com.fpt.cursus.service.DashboardService;
import com.fpt.cursus.service.EnrollCourseService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RestController
@CrossOrigin("*")
@SecurityRequirement(name = "api")
@Tag(name = "User Controller")
public class UserController {

    private final AccountService accountService;
    private final CourseService courseService;
    private final DashboardService dashboardService;
    private final EnrollCourseService enrollCourseService;

    @Autowired
    public UserController(AccountService accountService,
                          CourseService courseService,
                          DashboardService dashboardService,
                          EnrollCourseService enrollCourseService) {
        this.accountService = accountService;
        this.courseService = courseService;
        this.dashboardService = dashboardService;
        this.enrollCourseService = enrollCourseService;
    }

    @Operation(summary = "Send verifying instructor to admin",
            description = "Role default is STUDENT, need to call this Api to be INSTRUCTOR\n"
                    + "cvLink must to be generated by File Controller")
    @PostMapping(value = "/send-cv", consumes = "multipart/form-data")
    public ResponseEntity<Object> sendCv(@RequestParam("file") MultipartFile file) {
        return ResponseEntity.status(HttpStatus.OK).body(accountService.sendCv(file));
    }

    @Operation(summary = "view instructor by name", description = "input a partial name of instructor")
    @GetMapping("/view-instructor")
    public ResponseEntity<Object> getInstructor(@RequestParam String name,
                                                @RequestParam(required = false) String sortBy,
                                                @RequestParam(defaultValue = "1", required = false) int offset,
                                                @RequestParam(defaultValue = "10", required = false) int pageSize) {
        return ResponseEntity.status(HttpStatus.OK).body(accountService
                .getInstructorByName(name, offset, pageSize, sortBy));
    }

    @GetMapping("/view-all-instructor")
    public ResponseEntity<Object> getAllInstructor(@RequestParam(required = false) String sortBy,
                                                   @RequestParam(defaultValue = "1", required = false) int offset,
                                                   @RequestParam(defaultValue = "10", required = false) int pageSize) {
        return ResponseEntity.status(HttpStatus.OK).body(accountService.getAllInstructor(offset, pageSize, sortBy));
    }

    @PostMapping("/wishlist/add")
    public ResponseEntity<Object> addToWishList(@RequestParam List<Long> id) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.addToWishList(id));
    }

    @DeleteMapping("/wishlist/remove")
    public ResponseEntity<Object> removeFromWishList(@RequestParam Long id) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.removeFromWishList(id));
    }

    @GetMapping("/wishlist/view")
    public ResponseEntity<Object> viewWishList(@RequestParam(required = false) String sortBy,
                                               @RequestParam(defaultValue = "1", required = false) int offset,
                                               @RequestParam(defaultValue = "10", required = false) int pageSize) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.getWishListCourses(offset, pageSize, sortBy));
    }

    @PutMapping("/subscribe-instructor")
    public ResponseEntity<Object> subscribeInstructor(@RequestParam Long id) {
        accountService.subscribeInstructor(id);
        return ResponseEntity.status(HttpStatus.OK)
                .body("Subscribe successfully");
    }

    @PutMapping("/unsubscribe-instructor")
    public ResponseEntity<Object> unsubscribeInstructor(@RequestParam Long id) {
        accountService.unsubscribeInstructor(id);
        return ResponseEntity.status(HttpStatus.OK)
                .body("Unsubscribe successfully");
    }

    @Operation(summary = "View all subscriber(follower)")
    @GetMapping("/view-subscriber")
    public ResponseEntity<Object> viewSubscriber(@RequestParam(required = false) String sortBy,
                                                 @RequestParam(defaultValue = "1", required = false) int offset,
                                                 @RequestParam(defaultValue = "10", required = false) int pageSize) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(accountService.getSubscribers(offset, pageSize, sortBy));
    }

    @Operation(summary = "View all subscribing(following)")
    @GetMapping("/view-subscribing")
    public ResponseEntity<Object> viewSubscribing(@RequestParam(required = false) String sortBy,
                                                  @RequestParam(defaultValue = "1", required = false) int offset,
                                                  @RequestParam(defaultValue = "10", required = false) int pageSize) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(accountService.getSubscribing(offset, pageSize, sortBy));
    }

    @GetMapping("/enrolled-course/view-all-general")
    public ResponseEntity<Object> viewEnrolledCourses(@RequestParam(required = false) String sortBy,
                                                      @RequestParam(defaultValue = "1", required = false) int offset,
                                                      @RequestParam(defaultValue = "10", required = false) int pageSize) {

        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.getGeneralEnrolledCourses(sortBy, offset, pageSize));
    }

    @GetMapping("/enrolled-course/view-detail-by-id")
    public ResponseEntity<Object> viewDetailCourseById(@RequestParam Long id) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.getDetailCourseById(id));
    }

    @GetMapping("/enrolled-course/view-all-detail")
    public ResponseEntity<Object> viewDetailEnrolledCourses(@RequestParam(required = false) String sortBy,
                                                            @RequestParam(defaultValue = "1", required = false) int offset,
                                                            @RequestParam(defaultValue = "10", required = false) int pageSize) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.getDetailEnrolledCourses(sortBy, offset, pageSize));
    }

    @Operation(summary = "View course created by current user",
            description = "view course which created by current user, for admin and instructor")
    @GetMapping("/view-my-course")
    @PreAuthorize("hasAuthority('ADMIN')" + " || hasAuthority('INSTRUCTOR')")
    public ResponseEntity<Object> viewMyCourse(@RequestParam(required = false) String sortBy,
                                               @RequestParam(defaultValue = "1", required = false) int offset,
                                               @RequestParam(defaultValue = "10", required = false) int pageSize) {

        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.getCourseByCreatedBy(offset, pageSize, sortBy));
    }

    @GetMapping("/profile")
    public ResponseEntity<Object> viewProfile() {
        return ResponseEntity.status(HttpStatus.OK)
                .body(accountService.getProfile());
    }

    @GetMapping("/purchased-course")
    public ResponseEntity<Object> viewPurchaseCourse(@RequestParam(required = false) String sortBy,
                                                     @RequestParam(defaultValue = "1", required = false) int offset,
                                                     @RequestParam(defaultValue = "10", required = false) int pageSize) {
        return ResponseEntity.status(HttpStatus.OK)
                .body(courseService.getPurchasedCourse(offset, pageSize, sortBy));
    }

    @GetMapping("/instructor-dashboard")
    @PreAuthorize("hasAuthority('INSTRUCTOR')")
    public ResponseEntity<Object> getInstructorDashboard() {
        return ResponseEntity.status(HttpStatus.OK)
                .body(dashboardService.getInstructorDashboardRes());
    }

    @PutMapping("/enroll-course")
    public ResponseEntity<Object> enrollCourse(@RequestParam Long id) {
        enrollCourseService.enrollCourse(id);
        return ResponseEntity.status(HttpStatus.OK)
                .body("Enroll successfully");
    }
}
