package com.fpt.cursus.controller;

import com.fpt.cursus.dto.request.*;
import com.fpt.cursus.dto.response.ApiRes;
import com.fpt.cursus.dto.response.LoginResDto;
import com.fpt.cursus.entity.Account;
import com.fpt.cursus.service.OtpService;
import com.fpt.cursus.service.AccountService;
import com.fpt.cursus.util.ApiResUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@CrossOrigin("*")
@SecurityRequirement(name = "api")
@Validated
@Tag(name = "Account Controller")
public class AccountController {

    private final AccountService accountService;
    private final OtpService otpService;
    private final ApiResUtil apiResUtil;

    public AccountController(AccountService accountService, OtpService otpService, ApiResUtil apiResUtil) {
        this.accountService = accountService;
        this.otpService = otpService;
        this.apiResUtil = apiResUtil;
    }
    @Operation(summary = "Register new account", description = "API Register new account, auto send otp to email")
    @PostMapping("/auth/register")
    public ApiRes<Object> register(@Valid @RequestBody RegisterReqDto account) {
        Account newAccount = accountService.register(account);
        String otp = otpService.generateOtp();
        otpService.updateOldOtps(account.getEmail());
        otpService.sendOtpEmail(account.getEmail(), otp);
        otpService.saveOtp(account.getEmail(), otp);
        return apiResUtil.returnApiRes(null, null, null, newAccount);
    }
    @Operation(summary = "Login")
    @PostMapping("/auth/login")
    public ApiRes<Object> login(@RequestBody @Valid LoginReqDto account) {
        LoginResDto newAccount = accountService.login(account);
        return apiResUtil.returnApiRes(null, null, null, newAccount);
    }

    @PostMapping("/auth/login-google-firebase")
    public ApiRes<Object> loginGoogle(@RequestBody LoginGoogleReq loginGoogleReq) {
        LoginResDto newAccount = accountService.loginGoogle(loginGoogleReq.getToken());
        return apiResUtil.returnApiRes(null, null, null, newAccount);
    }
    @Operation(summary = "Verify Otp from email register", description = "Run after user click on link in email")
    @GetMapping("/auth/verify-account")
    public ApiRes<Object> verifyAccount(@RequestParam String email, @RequestParam String otp) {
        accountService.verifyAccount(email, otp);
        String successMessage = "Verify account successfully. You can now login with your email and password.";
        return apiResUtil.returnApiRes(null, null, successMessage, null);
    }
    @Operation(summary = "Send verifying instructor to admin",
            description = "Role default is STUDENT, need to call this Api to be INSTRUCTOR\n"
                    + "cvLink must to be generated by File Controller")
    @PatchMapping("/auth/send-verify-instructor")
    public ApiRes<Object> verifyInstructor(@RequestBody @Valid CvLinkDto cvLink) {
        accountService.sendVerifyInstructor(cvLink);
        String successMessage = "Your CV has been submitted";
        return apiResUtil.returnApiRes(null, null, successMessage, null);
    }
    @Operation(summary = "Regenerate Otp for email register")
    @PutMapping("/auth/regenerate-otp")
    public ApiRes<Object> regenerateOtp(@RequestParam String email) {
        accountService.regenerateOtp(email);
        String successMessage = "Regenerate OTP successfully. Please check your email to verify your account.";
        return apiResUtil.returnApiRes(null, null, successMessage, null);
    }


    @PatchMapping("/auth/change-password")
    public ApiRes<Object> changePassword(@RequestBody @Valid ChangePasswordDto changePasswordDto) {
        accountService.changePassword(changePasswordDto);
        String successMessage = "Change password successfully.";
        return apiResUtil.returnApiRes(null, null, successMessage, null);
    }

    @GetMapping("/auth/forgot-password")
    public ApiRes<Object> forgotPassword(@RequestParam String email) {
        accountService.forgotPassword(email);
        String successMessage = "Please check your email to reset your password.";
        return apiResUtil.returnApiRes(null, null, successMessage, null);
    }

    @PutMapping("/auth/reset-password")
    public ApiRes<Object> resetPassword(@RequestParam String email, @RequestParam String otp, @RequestBody @Valid ResetPasswordDto resetPasswordDto) {
        accountService.resetPassword(email, otp, resetPasswordDto);
        String successMessage = "Reset password successfully. Please login with your new password.";
        return apiResUtil.returnApiRes(null, null, successMessage, null);
    }
    @Operation(summary = "view instructor by name", description = "input a partial name of instructor")
    @GetMapping("/view-instructor")
    public ApiRes<Object> getInstructor(@RequestParam String name) {
        return apiResUtil.returnApiRes(null, null, null, accountService.getInstructorByName(name));
    }
}



